import os
import requests
import logging
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from flask import Flask

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# Environment variables
TOKEN = os.getenv("BOT_TOKEN")
PAYPAL_CLIENT_ID = os.getenv("PAYPAL_CLIENT_ID")
PAYPAL_CLIENT_SECRET = os.getenv("PAYPAL_CLIENT_SECRET")

# Flask app for keeping glitch app awake
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is alive!"

# Media file paths
TEASER_VIDEO = 'sample.mp4'
FULL_VIDEO = 'full_video.mp4'
PRICE_USD = 5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await context.bot.send_video(chat_id, video=open(TEASER_VIDEO, 'rb'), caption="This is a teaser video.")
    await context.bot.send_message(chat_id, f"To unlock the full video, pay ${PRICE_USD} and send back PAYPAL_ORDER_<order_id>.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if text.startswith("PAYPAL_ORDER_"):
        order_id = text.split("PAYPAL_ORDER_")[1]
        if verify_payment(order_id):
            await context.bot.send_message(chat_id, "Payment verified! Sending full video now.")
            await context.bot.send_video(chat_id, video=open(FULL_VIDEO, 'rb'))
        else:
            await context.bot.send_message(chat_id, "Payment not verified. Please check your order ID.")
    else:
        await context.bot.send_message(chat_id, "Invalid command. After payment, send PAYPAL_ORDER_<order_id>.")

def get_paypal_access_token():
    response = requests.post(
        "https://api-m.sandbox.paypal.com/v1/oauth2/token",
        headers={"Accept": "application/json"},
        data={"grant_type": "client_credentials"},
        auth=(PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET)
    )
    return response.json().get("access_token")

def verify_payment(order_id):
    token = get_paypal_access_token()
    response = requests.get(
        f"https://api-m.sandbox.paypal.com/v2/checkout/orders/{order_id}",
        headers={"Authorization": f"Bearer {token}"}
    )
    return response.json().get("status") == "COMPLETED"

async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start polling
    await application.start()
    await application.updater.start_polling()
    await application.updater.idle()

if __name__ == "__main__":
    import asyncio
    port = int(os.getenv("PORT", 5000))
    asyncio.run(main())
    app.run(host="0.0.0.0", port=port)
